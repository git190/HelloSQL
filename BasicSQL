/*
基础语句
*/

-- 查询指定字段并返回
SELECT population,name FROM world
  WHERE name in ('Germany','China');

-- 查询所有字段
select * from world;

-- 改名
select name 国家, population 人口;

-- 查询结果去重
select distinct name from world  
select distinct name population from world  --后两列唯一值
select name,round(gdp/population,-3)  -- -3表示四舍五入到千位，比如21254变为21000

-- 💦 查询带单引号
SELECT * FROM nobel
 where winner ='EUGENE O''NEILL'  --名字叫EUGENE O'NEILL，多加一个引号

-- 💦order by, 排序
-- 用法：列名，列名，列名+ decs 或asc表示降序或升序
SELECT winner,yr,subject FROM nobel
 where winner like 'Sir%' 
 order by yr desc, winner asc  -- 先year列降序，再winenr升序 

-- 💦ORDER BY subject in ,返回布尔值（true或false）
  -- 不在化学和物理的返回False，再按照subject默认升序，True在False后面，自然就排在最底下
  ORDER BY subject in ('chemistry ', 'physics '),subject,winner 

-- 列简单计算
select name,(gdp/population)
select name,ROUND(population / 1000000.0, 2)  --保留两位

-- 💦 where 查询列的指定范围
-- 运算符（＞，＜），范围（not in等），逻辑判断（is null，优先级and＞or）
select name, populaition form word
  where populaition between 1000 and 2000;

select name,population,area
from world
where (area >= 3000000 or population >= 250000000)
 AND NOT (area >= 3000000 AND population >= 250000000);  -- 不能同时满足
 

-- 💦 like 字符筛选
-- %代表零或多个字符，下划线_占位符代表单独字符
select name from world
  where name like 'Y%'  -- 表示y开头


-- 💦 count，计算数量
select count(*)  -- count()括号里没有字段，计算行数，有，计算该列多少行，忽略nan行
from world


--💦 length 计算字符串长度
SELECT name, capital
  FROM world
 WHERE LENGTH(name) = length(capital)



--💦 limit，取数。仅在MySQL中使用，卸载
 SELECT name,  capital
FROM world
order by name
limit 3,4  -- 从第3+1行开始，取4行，到第7行
limit 3  -- 取前三行



-- 💥💥💥查询和替换
-- 提取name后缀，生产一列extension
SELECT name, SUBSTRING(capital, LENGTH(name) + 1) AS extension
FROM world
WHERE capital LIKE CONCAT(name, '%') 
  AND LENGTH(capital) > LENGTH(name);


/*
聚合函数
*/

-- 列简单计算
select name,(gdp/population)
select name,ROUND(population / 1000000.0, 2)  --保留两位
select avg(gdp) --直接返回计算结果 

-- 💦group by, 聚合
select continent, count(name)  -- 在groupby基础上，计算大洲内各国家数量
  from world
  group by continent  -- 聚合大洲内的国家，放在一起，去重continent和name重复值

select yr, subject, count(winner)  	--计算每年各科目的获奖人数
  from nobel
  where yr between 2013 and 2015
  group by yr, subject		-- 聚合年份和科目，得到人
  order by yr desc, count(winner) asc		--排序

-- 💦 having，聚合后筛选
select continent
  from world
  group by continent									--先groupby
  having sum(population)>=100000000 	--再，大洲总人口超过1亿元

/*
一些函数
*/

-- 💦round，
select name,round(gdp/population,-3)  -- -3表示四舍五入到千位，比如21254变为21000
round(12.456,2)  --结果为12.47
round(123.4,-2)		--结果为100


-- 💦 concat字符串组合
select capital,name 
from world
where capital like CONCAT('%', name, '%');  -- 表示name在capital字符串中
  and capital <> name  --  字符完全不相同
  
WHERE capital like concat(name,' City')  -- name City组合


-- 💦replace, 替换函数
replace('A',a)  --A替换为a


--💦left right, 提取第几个字符，substring(string, start_position, length)
SELECT name,  capital
  FROM world
  where LEFT(name,1)= LEFT(capital ,1)  --提取左数第一个字符
  and name!=capital

substring('najfa', -2, 1) 		--从-2位开始提取3个字符，得到f
SUBSTRING('Hello, World!', 8)	--从第 8 个字符开始提取，提取到字符串的末尾，得到world！


-- 💦cast(x as type)，数据类型转换函数
-- type参数可以写为，char(n),date,time,datetime,decima等


-- 时间函数
-- 💦year(date), month(date), day(date)，获取对应年，月，日
-- 💦date_add，对起始时间进行加操作，date_sub，时间进行减操作
-- 💦datediff，算两个日期的天数差
-- 💦date_format，格式化


-- 条件判断函数
-- 💦if(expr,v1,v2)，条件返回，满足if返回v1，
-- 💦case when，


/*
一些函数
*/


-- 窗口函数💦over
-- over([partition by 字段名] [order by 字段名 asc|desc])
-- 排序 rank()over() dense_rank()over() row_number()over()
-- 向上偏移 lag(字段名,偏移量[,默认值])over() 
-- 向下偏移，lead(字段名,偏移量[,默认值])over() 

-- over例题
select year, party, votes,  --  --查询s1400大区，每年不同party得票数votes，
  rank()over(partition by year order by votes desc) as posn	--候选人根据votes排序
  from ge
  where district = 's1400'		
  order by party year --最后团体和时间排序

-- 偏移例题
select 
country
,date_format(time,'%Y-%m-%d',) date  --标准年月日时间 
,confirmed 截止当天累计确诊数
,lag(confirmed,1)over(partition by country order by time) 截止昨天累计确诊数
,(confirmed-lag(confirmed,1)over(partition by country order by time)) 每天新增
  from covid
  where country in ('Frence', 'Germany') and month(time)=1
  order by time



